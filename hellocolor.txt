;"HELLO WORLD! COLORIDO"


org 0x7c00 ;(indica para o montador onde o programa ficará na memória quando executado)
bits 16 ;(indica ao montador quais os tamanhos dos registradores)

mov ax,0 ;(podemos mexer nos registradores ax, bx, cx,dx. Definimos um valor para o registrador ax)
mov ds,ax ;(informamos pra bios em qual segmento estamos trabalhando, no caso 0. Usamos essa instrução pois não podemos jogar um valor diretamente em um registrador S)
cli ;(limpa todas as interrupcoes que tenham sido chamadas no processador)

inicio:
    mov cx,0 ;(movendo 0 para o registrador geral, precisamos dele em 0 para as funções chamadas posteriomente)

    mov si,ola ;(si=source index, registrador onde guardamos fontes de dados)
    call print ;(chama essa funcao, nomeada la em baixo)

    mov si,hello ;(movemos para o si o endereco do hello)
    call print  ;(mandamos imprimir, análogo ao goto, a vantagem é que ele volta para o ponto onde ele foi chamado)
    call halt





;===Comeco do procedimento print
print:
    push ax ;(guardamos na pilha a posição de memoria do ax)
    push bx ;(|| do bx)
    push dx

    mov bx, 0xB800 ;(0xB800 é o endereço da placa de vídeo)
    mov es,bx ;(es=registrador de segmento extra, guardamos por enquanto o endereco de memoria da placa de vídeo)
        
    ;cor:
    mov dl, 0
.loop:
    lodsb ;(pega o valor do registrador do source index e joga no al. Após, incrementa o si)
    cmp al,0 ;(comparamos o valor do registrado al com o byte 0, ou seja, veremos se chegou ao fim da string)
    je .retorno ;(se for igual ao byte 0, pule oara o retorno)
    mov di,cx  ;(agora, jogamos 0 no registrador de indice de dados)
    mov [es:di],al ;(pega o endereço de es, contamos di posições, e jogamos al)
    add cx, 1 ;(cx vai sendo incrementado de dois em dois, pois os caracteres na placa de video possuem dois bytes, um pra char e outro pra cor. Aqui de um em um)
    ;poderiamos usar o inc cx, que incrementa 1
    mov di, cx
    mov [es:di], dl
    inc cx
    inc dl
    jmp .loop

.retorno:
    pop bx
    pop ax
    ret

halt:
    hlt

hello: db "hello wordl",0

ola:    db "ol",160,",mundo",0
    times 510 - ($-$$) db 0 ;(comando do nasmi para contar quantos bytes ja foram colocados no programa até agora, serve para completarmos os 512 bytes)
    dw 0xaa55